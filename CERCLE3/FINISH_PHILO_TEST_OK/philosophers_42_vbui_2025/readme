  Philosopher Project



  <iSimulating the Dining Philosophers Problem with Threads and Mutexes in C


---

## Table of Contents
1. [Introduction](#introduction)
2. [Project Structure](#project-structure)
3. [Implementation Details](#implementation-details)
4. [Challenges and Solutions](#challenges-and-solutions)
5. [Simulation Flow](#simulation-flow)
6. [Complexity Analysis](#complexity-analysis)
7. [Execution](#execution)
8. [Author](#author)

---

The **Philosopher** project implements a version of the classic “Dining Philosophers” problem in the C language, leveraging multithreading, mutexes, and various synchronization strategies to prevent deadlocks, race conditions, or starvation scenarios.

---


**Source Files**  
1. **`lib.c`**  
   Basic utility functions for standard output (characters, strings, numbers) and string length checks.

2. **`main_utils.c`**  
   Offers time management utilities (getting current system time in ms, custom usleep) and supervises the simulation’s stop condition.

3. **`main.c`**  
   The program’s entry point. Parses arguments, initializes resources, launches the simulation (threads), and cleans up upon completion.

4. **`operator.c`**  
   Defines the core actions: eating, sleeping, and thinking. Also includes fork-taking logic.

5. **`parsing.c`**  
   Responsible for argument parsing, numeric checks, and input boundary validation.

6. **`init.c`**  
   Initializes the global parameters (`t_arg`) and sets up each philosopher’s forks and threads.

7. **`threading.c`**  
   Manages creation of philosopher threads and routine definitions (or calls out to helper functions).

8. **`finishim.c`**  
   Contains the monitoring thread (`finishim`) which periodically checks if a philosopher has died.

9. **`stop_operator.c`**  
   Waits for simulation end, joins all threads, destroys mutexes, and frees memory.

10. **`philosophers.h`**  
    Holds structures (`t_arg`, `t_phil`, `t_p`) and function prototypes used across the entire project.

---


### **Key Structures**
- **`t_arg`**  
  Global parameters (time_to_die, time_to_eat, etc.) plus mutexes (`write_mutex`, `dead`, `time_eat`, `finish`) and a `stop` flag.

- **`t_phil`**  
  Per-philosopher data (ID, left_f fork mutex, pointer to right_f, last meal time, plus threads).

- **`t_p`**  
  Wraps an array of philosophers (`t_phil *ph`) and the global `t_arg` struct.

### **Mutex Distribution**
- **Global**:  
  - `write_mutex` to serialize printing.  
  - `dead` to protect the `stop` flag.  
  - `time_eat` to manage last meal time safely.  
  - `finish` to count how many philosophers met their required meals.  
- **Per philosopher**:  
  - A `left_f` fork mutex.  
  - A pointer to the `right_f` fork (the neighbor’s left_f).  
  - An optional `meal_time_lock` if needed for local counters.

### **“God of Death” (Monitoring)**
- Each philosopher has a thread (`finishim`) that checks `(current_time - last_meal) >= time_to_die`. If yes, prints “died” and sets `stop=1`.

---

1. **Deadlock Avoidance**  
   Adopting an **odd/even** fork-picking strategy:
   - Even ID philosophers pick **left fork** first, then right.  
   - Odd ID philosophers pick **right fork** first, then left.  

2. **Race Condition Mitigation**  
   Mutexes around shared data:  
   - `dead` for the simulation’s stop condition.  
   - `time_eat` for last_meal access.  
   - `finish` for meal-completion count.

3. **Single Philosopher Edge Case**  
   If **total == 1**, the philosopher only has one fork and cannot eat. He dies after `time_to_die`, printing “died” and triggering stop=1.

---

## <span style="color:#9b59b6;">Simulation Flow</span>

1. **Initialization**  
   - Parse arguments, initialize global struct (`t_arg`), set up mutexes.  
   - Allocate philosophers, each with left_f, pointer to right_f.

2. **Threading**  
   - Each philosopher runs a main routine (`thread`).  
   - A separate `finishim` thread monitors potential death.

3. **Philosopher Actions**  
   - **fork picking** (odd/even logic).  
   - **eating** (update ms_eat, increment nb_eat).  
   - **sleeping** & **thinking**.

4. **Monitoring**  
   - If `(current_time - ms_eat) >= time_to_die`, signals a death event (`stop=1`).

5. **Cleanup**  
   - Join threads, destroy mutexes, free memory.

---

**Time Complexity**  
- **O(n)** for thread creation/joining.  
- Each philosopher’s routine is constant-time operations inside loops, though they run concurrently.

**Space Complexity**  
- **O(n)** for philosophers and forks.  

---

1. **Compile**  
   ```bash
   make

   ./philo <number_of_philosophers> <time_to_die> <time_to_eat> \
        <time_to_sleep> [number_of_times_each_philosopher_must_eat]


Van Tien BUI
Email: vbui@student.42.fr
École 42 Paris
